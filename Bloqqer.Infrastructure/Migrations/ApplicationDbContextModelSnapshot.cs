// <auto-generated />
using System;
using Bloqqer.Infrastructure.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Bloqqer.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Bloqqer.Domain.Models.ApplicationRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Bloqqer.Domain.Models.ApplicationUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("LastName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("MiddleName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<Guid>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<Guid>("RemovedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("RemovedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("Bloqqer.ApplicationUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("c108f0d4-7f9f-49eb-8a18-9f9bd81e1765"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "eeaebbac-72fc-4d33-8390-dbde990b3ffe",
                            CreatedBy = new Guid("2afb7b32-9305-4c43-90d3-78412603e4ff"),
                            CreatedOn = new DateTime(2024, 8, 9, 18, 32, 32, 211, DateTimeKind.Utc).AddTicks(2077),
                            Email = "admin@iyyel.io",
                            EmailConfirmed = true,
                            FirstName = "Admin",
                            LastName = "",
                            LockoutEnabled = false,
                            MiddleName = "",
                            ModifiedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            NormalizedEmail = "ADMIN@IYYEL.IO",
                            NormalizedUserName = "ADMIN@IYYEL.IO",
                            PasswordHash = "AQAAAAIAAYagAAAAEMuR9/VQYedeRPW+QgE+CC/BIa5CHSKUhCkWmoD/8spOCoI5MB/j8VcL1d4vqQ44tg==",
                            PhoneNumber = "21212121",
                            PhoneNumberConfirmed = true,
                            RemovedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            SecurityStamp = "admin",
                            TwoFactorEnabled = false,
                            UserName = "admin@iyyel.io"
                        },
                        new
                        {
                            Id = new Guid("de05b775-a344-497f-a091-643d267ff25d"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "e582f153-e634-4973-93a8-e30c95e07de8",
                            CreatedBy = new Guid("2afb7b32-9305-4c43-90d3-78412603e4ff"),
                            CreatedOn = new DateTime(2024, 8, 9, 18, 32, 32, 252, DateTimeKind.Utc).AddTicks(234),
                            Email = "james@butler.xyz",
                            EmailConfirmed = true,
                            FirstName = "James",
                            LastName = "Butler",
                            LockoutEnabled = false,
                            MiddleName = "",
                            ModifiedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            NormalizedEmail = "JAMES@BUTLER.XYZ",
                            NormalizedUserName = "JAMES@BUTLER.XYZ",
                            PasswordHash = "AQAAAAIAAYagAAAAELV8NY5quulkT3+a7sz0xVuCMd28qtWLFlY0qGaBeg0B/+V2GE3i/OCpmqMI+OwVGg==",
                            PhoneNumber = "23232323",
                            PhoneNumberConfirmed = true,
                            RemovedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            SecurityStamp = "james",
                            TwoFactorEnabled = false,
                            UserName = "james@butler.xyz"
                        });
                });

            modelBuilder.Entity("Bloqqer.Domain.Models.Bloq", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AuthorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("IsPrivate")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPublished")
                        .HasColumnType("bit");

                    b.Property<Guid>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("Published")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("RemovedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("RemovedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.ToTable("Bloqqer.Bloqs", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("295efc76-56d6-4839-ada4-25924f912aa0"),
                            AuthorId = new Guid("c108f0d4-7f9f-49eb-8a18-9f9bd81e1765"),
                            CreatedBy = new Guid("2afb7b32-9305-4c43-90d3-78412603e4ff"),
                            CreatedOn = new DateTime(2024, 8, 9, 18, 32, 32, 251, DateTimeKind.Utc).AddTicks(9987),
                            Description = "Admin Seed Bloq Description 1/2",
                            IsPrivate = false,
                            IsPublished = true,
                            ModifiedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            Published = new DateTime(2024, 8, 9, 18, 32, 32, 251, DateTimeKind.Utc).AddTicks(9985),
                            RemovedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            Title = "Admin Seed Bloq Title 1/2"
                        },
                        new
                        {
                            Id = new Guid("f8d31b28-1c9a-43c0-aebd-19236af4422f"),
                            AuthorId = new Guid("c108f0d4-7f9f-49eb-8a18-9f9bd81e1765"),
                            CreatedBy = new Guid("2afb7b32-9305-4c43-90d3-78412603e4ff"),
                            CreatedOn = new DateTime(2024, 8, 9, 18, 32, 32, 251, DateTimeKind.Utc).AddTicks(9992),
                            Description = "Admin Seed Bloq Description 2/2",
                            IsPrivate = true,
                            IsPublished = false,
                            ModifiedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            RemovedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            Title = "Admin Seed Bloq Title 2/2"
                        },
                        new
                        {
                            Id = new Guid("dc5b12fd-f5a3-4a04-a6e0-c4cd552cd6b5"),
                            AuthorId = new Guid("de05b775-a344-497f-a091-643d267ff25d"),
                            CreatedBy = new Guid("2afb7b32-9305-4c43-90d3-78412603e4ff"),
                            CreatedOn = new DateTime(2024, 8, 9, 18, 32, 32, 290, DateTimeKind.Utc).AddTicks(4148),
                            Description = "James Seed Bloq Description",
                            IsPrivate = false,
                            IsPublished = true,
                            ModifiedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            Published = new DateTime(2024, 8, 9, 18, 32, 32, 290, DateTimeKind.Utc).AddTicks(4146),
                            RemovedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            Title = "James Seed Bloq Title"
                        });
                });

            modelBuilder.Entity("Bloqqer.Domain.Models.Comment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AuthorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsPublished")
                        .HasColumnType("bit");

                    b.Property<Guid>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("PostId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("Published")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("RemovedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("RemovedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("PostId");

                    b.ToTable("Bloqqer.Comments", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("1af0038f-73a2-4fbb-867f-75a90cf33536"),
                            AuthorId = new Guid("c108f0d4-7f9f-49eb-8a18-9f9bd81e1765"),
                            Content = "Admin Seed Bloq Post 1 Comment 1/2",
                            CreatedBy = new Guid("2afb7b32-9305-4c43-90d3-78412603e4ff"),
                            CreatedOn = new DateTime(2024, 8, 9, 18, 32, 32, 252, DateTimeKind.Utc).AddTicks(58),
                            IsPublished = true,
                            ModifiedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            PostId = new Guid("0cb3379f-6bea-424d-ba0f-a44f4fa6a11a"),
                            Published = new DateTime(2024, 8, 9, 18, 32, 32, 252, DateTimeKind.Utc).AddTicks(57),
                            RemovedBy = new Guid("00000000-0000-0000-0000-000000000000")
                        },
                        new
                        {
                            Id = new Guid("180daba0-d465-40d0-bb01-68e0ac40b86c"),
                            AuthorId = new Guid("c108f0d4-7f9f-49eb-8a18-9f9bd81e1765"),
                            Content = "Admin Seed Bloq Post 1 Comment 2/2",
                            CreatedBy = new Guid("2afb7b32-9305-4c43-90d3-78412603e4ff"),
                            CreatedOn = new DateTime(2024, 8, 9, 18, 32, 32, 252, DateTimeKind.Utc).AddTicks(60),
                            IsPublished = false,
                            ModifiedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            PostId = new Guid("0cb3379f-6bea-424d-ba0f-a44f4fa6a11a"),
                            RemovedBy = new Guid("00000000-0000-0000-0000-000000000000")
                        },
                        new
                        {
                            Id = new Guid("3e8f006d-04c7-4d2b-97a2-108de9b39b3a"),
                            AuthorId = new Guid("c108f0d4-7f9f-49eb-8a18-9f9bd81e1765"),
                            Content = "Admin Seed Bloq Post 2 Comment 1/2",
                            CreatedBy = new Guid("2afb7b32-9305-4c43-90d3-78412603e4ff"),
                            CreatedOn = new DateTime(2024, 8, 9, 18, 32, 32, 252, DateTimeKind.Utc).AddTicks(61),
                            IsPublished = true,
                            ModifiedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            PostId = new Guid("efab75ca-f1ac-4211-8076-e344b9c98025"),
                            Published = new DateTime(2024, 8, 9, 18, 32, 32, 252, DateTimeKind.Utc).AddTicks(61),
                            RemovedBy = new Guid("00000000-0000-0000-0000-000000000000")
                        },
                        new
                        {
                            Id = new Guid("fcc41c42-f406-4b28-9b4f-c7e02ccb6380"),
                            AuthorId = new Guid("c108f0d4-7f9f-49eb-8a18-9f9bd81e1765"),
                            Content = "Admin Seed Bloq Post 2 Comment 2/2",
                            CreatedBy = new Guid("2afb7b32-9305-4c43-90d3-78412603e4ff"),
                            CreatedOn = new DateTime(2024, 8, 9, 18, 32, 32, 252, DateTimeKind.Utc).AddTicks(63),
                            IsPublished = false,
                            ModifiedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            PostId = new Guid("efab75ca-f1ac-4211-8076-e344b9c98025"),
                            RemovedBy = new Guid("00000000-0000-0000-0000-000000000000")
                        },
                        new
                        {
                            Id = new Guid("d1cd67d2-67e5-4c6f-aabb-cb4056dd5064"),
                            AuthorId = new Guid("de05b775-a344-497f-a091-643d267ff25d"),
                            Content = "James Seed Bloq Post 1 Comment 1/3",
                            CreatedBy = new Guid("2afb7b32-9305-4c43-90d3-78412603e4ff"),
                            CreatedOn = new DateTime(2024, 8, 9, 18, 32, 32, 290, DateTimeKind.Utc).AddTicks(4172),
                            IsPublished = true,
                            ModifiedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            PostId = new Guid("0afda5fc-0a56-45b6-a983-3018048c204a"),
                            Published = new DateTime(2024, 8, 9, 18, 32, 32, 290, DateTimeKind.Utc).AddTicks(4172),
                            RemovedBy = new Guid("00000000-0000-0000-0000-000000000000")
                        },
                        new
                        {
                            Id = new Guid("49304138-ec9e-495e-8774-d4b2b64781ce"),
                            AuthorId = new Guid("de05b775-a344-497f-a091-643d267ff25d"),
                            Content = "James Seed Bloq Post 1 Comment 2/3",
                            CreatedBy = new Guid("2afb7b32-9305-4c43-90d3-78412603e4ff"),
                            CreatedOn = new DateTime(2024, 8, 9, 18, 32, 32, 290, DateTimeKind.Utc).AddTicks(4176),
                            IsPublished = true,
                            ModifiedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            PostId = new Guid("0afda5fc-0a56-45b6-a983-3018048c204a"),
                            Published = new DateTime(2024, 8, 9, 18, 32, 32, 290, DateTimeKind.Utc).AddTicks(4175),
                            RemovedBy = new Guid("00000000-0000-0000-0000-000000000000")
                        },
                        new
                        {
                            Id = new Guid("679dee46-f2f2-4859-bedc-7d542eae5089"),
                            AuthorId = new Guid("de05b775-a344-497f-a091-643d267ff25d"),
                            Content = "James Seed Bloq Post 1 Comment 3/3",
                            CreatedBy = new Guid("2afb7b32-9305-4c43-90d3-78412603e4ff"),
                            CreatedOn = new DateTime(2024, 8, 9, 18, 32, 32, 290, DateTimeKind.Utc).AddTicks(4177),
                            IsPublished = true,
                            ModifiedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            PostId = new Guid("0afda5fc-0a56-45b6-a983-3018048c204a"),
                            Published = new DateTime(2024, 8, 9, 18, 32, 32, 290, DateTimeKind.Utc).AddTicks(4177),
                            RemovedBy = new Guid("00000000-0000-0000-0000-000000000000")
                        });
                });

            modelBuilder.Entity("Bloqqer.Domain.Models.Follow", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("FollowedId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("FollowerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("RemovedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("RemovedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("FollowedId");

                    b.HasIndex("FollowerId");

                    b.ToTable("Bloqqer.Follows", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("aac1463f-f051-4407-8ee6-f23431e9ccaa"),
                            CreatedBy = new Guid("2afb7b32-9305-4c43-90d3-78412603e4ff"),
                            CreatedOn = new DateTime(2024, 8, 9, 18, 32, 32, 290, DateTimeKind.Utc).AddTicks(4180),
                            FollowedId = new Guid("c108f0d4-7f9f-49eb-8a18-9f9bd81e1765"),
                            FollowerId = new Guid("de05b775-a344-497f-a091-643d267ff25d"),
                            ModifiedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            RemovedBy = new Guid("00000000-0000-0000-0000-000000000000")
                        });
                });

            modelBuilder.Entity("Bloqqer.Domain.Models.Post", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AuthorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("BloqId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("IsPublished")
                        .HasColumnType("bit");

                    b.Property<Guid>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("Published")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("RemovedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("RemovedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("BloqId");

                    b.ToTable("Bloqqer.Posts", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("0cb3379f-6bea-424d-ba0f-a44f4fa6a11a"),
                            AuthorId = new Guid("c108f0d4-7f9f-49eb-8a18-9f9bd81e1765"),
                            BloqId = new Guid("295efc76-56d6-4839-ada4-25924f912aa0"),
                            Content = "Admin Seed Bloq Post 1/2 Content",
                            CreatedBy = new Guid("2afb7b32-9305-4c43-90d3-78412603e4ff"),
                            CreatedOn = new DateTime(2024, 8, 9, 18, 32, 32, 251, DateTimeKind.Utc).AddTicks(9999),
                            Description = "Admin Seed Bloq Post 1/2 Description",
                            IsPublished = true,
                            ModifiedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            Published = new DateTime(2024, 8, 9, 18, 32, 32, 251, DateTimeKind.Utc).AddTicks(9999),
                            RemovedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            Title = "Admin Seed Bloq Post 1/2"
                        },
                        new
                        {
                            Id = new Guid("efab75ca-f1ac-4211-8076-e344b9c98025"),
                            AuthorId = new Guid("c108f0d4-7f9f-49eb-8a18-9f9bd81e1765"),
                            BloqId = new Guid("295efc76-56d6-4839-ada4-25924f912aa0"),
                            Content = "Admin Seed Bloq Post 2/2 Content",
                            CreatedBy = new Guid("2afb7b32-9305-4c43-90d3-78412603e4ff"),
                            CreatedOn = new DateTime(2024, 8, 9, 18, 32, 32, 252, DateTimeKind.Utc).AddTicks(2),
                            Description = "Admin Seed Bloq Post 2/2 Description",
                            IsPublished = false,
                            ModifiedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            RemovedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            Title = "Admin Seed Bloq Post 2/2"
                        },
                        new
                        {
                            Id = new Guid("0afda5fc-0a56-45b6-a983-3018048c204a"),
                            AuthorId = new Guid("de05b775-a344-497f-a091-643d267ff25d"),
                            BloqId = new Guid("dc5b12fd-f5a3-4a04-a6e0-c4cd552cd6b5"),
                            Content = "James Seed Bloq Post 1/2 Content",
                            CreatedBy = new Guid("2afb7b32-9305-4c43-90d3-78412603e4ff"),
                            CreatedOn = new DateTime(2024, 8, 9, 18, 32, 32, 290, DateTimeKind.Utc).AddTicks(4157),
                            Description = "James Seed Bloq Post 1/2 Description",
                            IsPublished = true,
                            ModifiedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            Published = new DateTime(2024, 8, 9, 18, 32, 32, 290, DateTimeKind.Utc).AddTicks(4156),
                            RemovedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            Title = "James Seed Bloq Post 1/2"
                        },
                        new
                        {
                            Id = new Guid("f298d1f6-9ae6-477c-af37-173f959cdd1c"),
                            AuthorId = new Guid("de05b775-a344-497f-a091-643d267ff25d"),
                            BloqId = new Guid("dc5b12fd-f5a3-4a04-a6e0-c4cd552cd6b5"),
                            Content = "James Seed Bloq Post 2/2 Content",
                            CreatedBy = new Guid("2afb7b32-9305-4c43-90d3-78412603e4ff"),
                            CreatedOn = new DateTime(2024, 8, 9, 18, 32, 32, 290, DateTimeKind.Utc).AddTicks(4167),
                            Description = "James Seed Bloq Post 2/2 Description",
                            IsPublished = true,
                            ModifiedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            Published = new DateTime(2024, 8, 9, 18, 32, 32, 290, DateTimeKind.Utc).AddTicks(4167),
                            RemovedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            Title = "James Seed Bloq Post 2/2"
                        });
                });

            modelBuilder.Entity("Bloqqer.Domain.Models.Reaction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("BloqId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CommentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("PostId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ReactorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RemovedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("RemovedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("BloqId");

                    b.HasIndex("CommentId");

                    b.HasIndex("PostId");

                    b.HasIndex("ReactorId");

                    b.ToTable("Bloqqer.Reactions", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("7a8504bd-5204-4ff7-8473-9b8a625d5d52"),
                            CreatedBy = new Guid("2afb7b32-9305-4c43-90d3-78412603e4ff"),
                            CreatedOn = new DateTime(2024, 8, 9, 18, 32, 32, 290, DateTimeKind.Utc).AddTicks(4164),
                            ModifiedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            PostId = new Guid("0afda5fc-0a56-45b6-a983-3018048c204a"),
                            ReactorId = new Guid("c108f0d4-7f9f-49eb-8a18-9f9bd81e1765"),
                            RemovedBy = new Guid("00000000-0000-0000-0000-000000000000")
                        },
                        new
                        {
                            Id = new Guid("0fe8f779-88d5-46dc-a705-48eabe7691de"),
                            CreatedBy = new Guid("2afb7b32-9305-4c43-90d3-78412603e4ff"),
                            CreatedOn = new DateTime(2024, 8, 9, 18, 32, 32, 290, DateTimeKind.Utc).AddTicks(4166),
                            ModifiedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            PostId = new Guid("0afda5fc-0a56-45b6-a983-3018048c204a"),
                            ReactorId = new Guid("c108f0d4-7f9f-49eb-8a18-9f9bd81e1765"),
                            RemovedBy = new Guid("00000000-0000-0000-0000-000000000000")
                        },
                        new
                        {
                            Id = new Guid("981f0e58-66df-4329-add8-3eaba8ae51d3"),
                            CommentId = new Guid("d1cd67d2-67e5-4c6f-aabb-cb4056dd5064"),
                            CreatedBy = new Guid("2afb7b32-9305-4c43-90d3-78412603e4ff"),
                            CreatedOn = new DateTime(2024, 8, 9, 18, 32, 32, 290, DateTimeKind.Utc).AddTicks(4174),
                            ModifiedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            ReactorId = new Guid("c108f0d4-7f9f-49eb-8a18-9f9bd81e1765"),
                            RemovedBy = new Guid("00000000-0000-0000-0000-000000000000")
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Bloqqer.Domain.Models.Bloq", b =>
                {
                    b.HasOne("Bloqqer.Domain.Models.ApplicationUser", "Author")
                        .WithMany("Bloqs")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");
                });

            modelBuilder.Entity("Bloqqer.Domain.Models.Comment", b =>
                {
                    b.HasOne("Bloqqer.Domain.Models.ApplicationUser", "Author")
                        .WithMany("Comments")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Bloqqer.Domain.Models.Post", "Post")
                        .WithMany("Comments")
                        .HasForeignKey("PostId");

                    b.Navigation("Author");

                    b.Navigation("Post");
                });

            modelBuilder.Entity("Bloqqer.Domain.Models.Follow", b =>
                {
                    b.HasOne("Bloqqer.Domain.Models.ApplicationUser", "Followed")
                        .WithMany("Following")
                        .HasForeignKey("FollowedId");

                    b.HasOne("Bloqqer.Domain.Models.ApplicationUser", "Follower")
                        .WithMany("Followers")
                        .HasForeignKey("FollowerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Followed");

                    b.Navigation("Follower");
                });

            modelBuilder.Entity("Bloqqer.Domain.Models.Post", b =>
                {
                    b.HasOne("Bloqqer.Domain.Models.ApplicationUser", "Author")
                        .WithMany("Posts")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Bloqqer.Domain.Models.Bloq", "Bloq")
                        .WithMany("Posts")
                        .HasForeignKey("BloqId");

                    b.Navigation("Author");

                    b.Navigation("Bloq");
                });

            modelBuilder.Entity("Bloqqer.Domain.Models.Reaction", b =>
                {
                    b.HasOne("Bloqqer.Domain.Models.Bloq", "Bloq")
                        .WithMany("Reactions")
                        .HasForeignKey("BloqId");

                    b.HasOne("Bloqqer.Domain.Models.Comment", "Comment")
                        .WithMany("Reactions")
                        .HasForeignKey("CommentId");

                    b.HasOne("Bloqqer.Domain.Models.Post", "Post")
                        .WithMany("Reactions")
                        .HasForeignKey("PostId");

                    b.HasOne("Bloqqer.Domain.Models.ApplicationUser", "Reactor")
                        .WithMany("Reactions")
                        .HasForeignKey("ReactorId");

                    b.Navigation("Bloq");

                    b.Navigation("Comment");

                    b.Navigation("Post");

                    b.Navigation("Reactor");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("Bloqqer.Domain.Models.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("Bloqqer.Domain.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("Bloqqer.Domain.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("Bloqqer.Domain.Models.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Bloqqer.Domain.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("Bloqqer.Domain.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Bloqqer.Domain.Models.ApplicationUser", b =>
                {
                    b.Navigation("Bloqs");

                    b.Navigation("Comments");

                    b.Navigation("Followers");

                    b.Navigation("Following");

                    b.Navigation("Posts");

                    b.Navigation("Reactions");
                });

            modelBuilder.Entity("Bloqqer.Domain.Models.Bloq", b =>
                {
                    b.Navigation("Posts");

                    b.Navigation("Reactions");
                });

            modelBuilder.Entity("Bloqqer.Domain.Models.Comment", b =>
                {
                    b.Navigation("Reactions");
                });

            modelBuilder.Entity("Bloqqer.Domain.Models.Post", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Reactions");
                });
#pragma warning restore 612, 618
        }
    }
}
